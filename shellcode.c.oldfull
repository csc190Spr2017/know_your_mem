// This is an example of turning simple C into raw shellcode.

// make shellcode.bin will compile to assembly
// make shellcode.bin.pkt will prepend the length so you can
//    ./know_your_mem < shellcode.bin.pkt

// Note: Right now the 'build' does not support .(ro)data
//       If you want them you'll have to adjust the Makefile.
//       They're not really necessary to solve this challenge though.


// From https://chromium.googlesource.com/linux-syscall-support/
static int my_errno = 0;
#define SYS_ERRNO my_errno
#include "linux-syscall-support/linux_syscall_support.h"
#include <stdio.h>
#include <unistd.h>
#include <sys/mman.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <asm/errno.h>

#define ADDR_MIN   0x0000100000000000UL
#define ADDR_MASK  0x00000ffffffff000UL
void *search(void* ptr);


void _start()
{
	char *dst = (char *) __builtin_frame_address(0);
	dst[0] = 'A';
	dst[1] = 'B';
	dst[2] = '\n';
    sys_write(1, __builtin_frame_address(0), 3);  
/*
    char *ptr = ADDR_MIN ;
    for(int i=0; i<100; i++){
    	ptr = search(ptr);
		if(*ptr=='O' && *(ptr+1)=='O'){
    		sys_exit_group(2);                            // Exit
		}
		ptr += 0x1000UL;
    	sys_write(1, __builtin_frame_address(0), 3);  
    }
    sys_write(1, __builtin_frame_address(0), 5);  // Prints something (note: best avoid literals)
*/
    sys_exit_group(2);                            // Exit
}

